php full json:
{
	"id"		:"(int:Draft id)",
	"type"		:"fullInitalize",
	"blueName"	:"(string: blue player name)",
	"redName"	:"(string: red player name)",
	"firstHand"	:"(int: 0 => blue // 1 => red)",
	"createdTime":"(int: time stamp of draft creation)",
	"prepareTime":"120",
	"draftTime"	:"45",
	"mapInfo"	:{
		"mapPoolID"		:"(int: map pool id in SQL database)",
		"maps"		:[{
			"mapID"			:"(int: map id in SQL database, setting i18n by this)",
			"mapName"		:"(string: map name)",
			"mapPreview"	:"(string: full absolute url to preview img)"
		},{},{}......]
	},
	"draftStatus":{
		"active"	:"(int: -1 => expired // 0 =>finished // 1 => working)",
		"action"	:[{
			"timestamp"	:"(int: action time stamp)",
			"type"		:"(string: ban or pick)",
			"mapID"		:"(int: map id in SQL database)",
			"mapName"	:"(string: map name)",
			"actionID"	:"(int: sequence of action, starts from 0. In case of json mess)",
			"player"	:"(bool: 0 => blue // 1 => red)"
		},{},{}......]
	}
}

Only send this full json on page initalize.

ajax->php polling json:
{
	"id"		:"(int:Draft id)",
	"type"		:"obPolling",
	"draftStatus":{
		"active"	:"(int: -1 => expired // 0 =>finished // 1 => working)",
		"action"	:[
			"timestamp"	:"(int: action time stamp)",
			"type"		:"(string: ban or pick)",
			"mapID"		:"(int: map id in SQL database)",
			"mapName"	:"(string: map name)",
			"actionID"	:"(int: sequence of action, starts from 0. In case of json mess)",
			"player"	:"(bool: 0 => blue // 1 => red)"
		},{},{}......]
	}
}

Return this json on each observer polling.

php->websocket push work json:
{
	"id"		:"(int:Draft id)",
	"type"		:"server",
	"timestamp"	:"(int:timestamp)",
	"draftStatus":{
		"active"	:"(int: -1 => expired // 0 =>finished // 1 => working)",
		"action"	:[{
			"timestamp"	:"(int: action time stamp)",
			"type"		:"(string: ban , pick , ready)",
			"mapID"		:"(int: map id in SQL database)",
			"mapName"	:"(string: map name)",
			"actionID"	:"(int: sequence of action, starts from 0. In case of json mess)",
			"player"	:"(bool: 0 => blue // 1 => red)"
		},{},{}......]
	}
}

Push this json to both client when finished database work.

websocket->php work json:
{
	"id"		:"(int:Draft id)",
	"type"		:"client",
	"action"	:{
			"timestamp"	:"(int: action time stamp)",
			"type"		:"(string: ban , pick , ready , init)",
			"mapID"		:"(int: map id in SQL database)",
			"mapName"	:"(string: map name)",
			"actionID"	:"(int: sequence of action, starts from 0. In case of json mess , -1 for init)",
			"player"	:"(bool: 0 => blue // 1 => red)"
	}
}

php<->websocket keepalive json:
{
	"id"		:"(int:Draft id)",
	"type"		:"keepalive",
	"key"		:"(int:client key)"
}

Use this to keep alive with client each 5 second.



Load sequence:
Create:
After posted data to server, write them to database.
Client access key using [ draft id + create time stamp ] as salt, calculate MD5 value by player name.
php returns MD5 key directly on creation finish page

Websocket:
Auth by ajax
Once authenticated, connect websocket by game id + clientKey.
Websocket reacts as the json above.
Server should rebroadcast each package to both client.
UI change and server database action should trigger by each action message instead of client local message.
Lockin button and ready button should only handle send message function.

Time stamp are stored in memcache.

Client:
1.When page initalize,using full json to make maps, player name, bottom slots.
2.All the timer, time out funcion should judge time by time stamp. There're no any countdown.